{"version":3,"file":"static/webpack/static/development/pages/_app.js.1e749bacc0bae703ae66.hot-update.js","sources":["webpack:///./components/Search.js"],"sourcesContent":["import React from 'react';\nimport Downshift from 'downshift';\nimport Router from 'react-apollo';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport debounce from 'lodash.debounce';\nimport { DropDown, DropDownItem, SearchStyles } from './styles/DropDown';\n\nconst SEARCH_ITEMS_QUERY = gql `\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(where: {\n      OR: [\n        {title_contains: $searchTerm},\n        {description_contains: $searchTerm}\n      ]\n    }) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nclass AutoComplete extends React.Component {\n  state = {\n    items: [],\n    loading: false,\n  }\n  onChange = debounce(async (e, client) => {\n    // turn loading on\n    this.setState({ loading: true });\n    // Manually query apollo client\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value },\n    });\n    this.setState({\n      items: res.data.items,\n      loading: false,\n    })\n  }, 350);\n  render() {\n    return (\n      <SearchStyles>\n        <Downshift>\n          {({ getInputProps, getItemProps, isOpen, inputValue, highlightedIndex }) => (\n          <div>\n            <ApolloConsumer>\n              {client => (\n                  <input\n                  {...getInputProps({\n                    type: \"search\",\n                    placeholder: \"search for an item\",\n                    className: this.state.loading ? 'loading' : '',\n                    onChange: e => {\n                      e.persist();\n                      this.onChange(e, client);\n                  },\n                })}\n                />\n              )}\n            </ApolloConsumer>\n            {isOpen && (\n                <DropDown>\n                {this.state.items.map((item, index) => (\n                  <DropDownItem \n                    {...getInputProps({ item })\n                  }\n                    key={item.id} highlighted={index === highlightedIndex}>\n                    <img width='50' src={item.image} alt={item.title}/>\n                    {item.title}\n                  </DropDownItem>))}\n              </DropDown>\n            )}\n          </div>\n        )}\n        </Downshift>\n      </SearchStyles>\n    )\n  }\n}\n\nexport default AutoComplete;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAcA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAKA;AACA;AAAA;AAAA;AAFA;AACA;AALA;AAIA;AACA;AAGA;AACA;AACA;AAFA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;AAYA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAnBA;AAkCA;;;;AAxDA;AACA;AA0DA;;;;A","sourceRoot":""}